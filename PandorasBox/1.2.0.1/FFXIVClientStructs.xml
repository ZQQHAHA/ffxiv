<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFXIVClientStructs</name>
    </assembly>
    <members>
        <member name="T:FFXIVClientStructs.Attributes.FixedArrayAttribute">
            <summary>
            Describes a Fixed Buffer to assist with automatic parsing.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Character.Character.GetCastInfo">
            <summary>
            Gets the <see cref="T:FFXIVClientStructs.FFXIV.Client.Game.Character.Character.CastInfo"/> struct for this Character.
            May be null for certain Character subclasses, e.g. <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.Character.Character.Companion"/>.
            </summary>
            <returns>Returns a pointer to a CastInfo struct, or <c>null</c>.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Character.DrawDataContainer.HideWeapons(System.Boolean)">
            <summary>
            Called when Hide/Display Weapons when sheathed is toggled or /displayarms is used.
            </summary>
            <param name="hide">When false, weapons will be turned visible, when true, they will be hidden.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Character.DrawDataContainer.HideHeadgear(System.UInt32,System.Boolean)">
            <summary>
            Called when Hide/Display Headgear is toggled or /displayhead is used.
            </summary>
            <param name="unk">Almost always 0, but sometimes not?</param>
            <param name="hide">When false, the headgear will be turned visible, when true it will be hidden.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Character.DrawDataContainer.SetVisor(System.Boolean)">
            <summary>
            Called when Manually Adjust Visor is toggled or /visor is used.
            </summary>
            <param name="state">When true, visor will be toggled on, when false it will be toggled off.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.GetAirshipVoyageTimeAndDistance(System.Byte,System.Byte,System.Int16,System.UInt32*,System.UInt32*)">
            <summary>
            Gets the airship voyage distance and time in pointers
            <br/>
            Starting point is at 127 and then goes from 0-24
            <br/>
            22 is not used as its the old Diadem
            </summary>
            <param name="pointA">The point to calculate from</param>
            <param name="pointB">The point to calculate to</param>
            <param name="speed">Speed of the airship to use</param>
            <param name="time">The voyage time returned</param>
            <param name="distance">The voyage distance returned</param>
            <returns>Does not return anything use full at times</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.GetAirshipSurveyDuration(System.Byte,System.Int16)">
            <summary>
            Gets the airship survey duration
            </summary>
            <param name="point">The point to calculate 0-24. 22 is not used</param>
            <param name="speed">Speed of the airship to use</param>
            <returns>Survey duration</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.GetSubmarineVoyageTime(System.Byte,System.Byte,System.Int16)">
            <summary>
            Gets the submarine voyage time
            <br/>
            Each map uses 0 index as their starting point respectably.
            <br/>
            Example: Deep-sea Site starts at 0 where Sea of Ash starts at 31 and so on.
            <br/>
            This is related to that Deep-sea Site has 30 points and 1 starting location.
            </summary>
            <param name="pointA">The point to calculate from</param>
            <param name="pointB">The point to calculate to</param>
            <param name="speed">Speed of the submarine to use</param>
            <returns>Voyage time</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.GetSubmarineVoyageDistance(System.Byte,System.Byte)">
            <summary>
            Gets the submarine voyage distance
            </summary>
            <param name="pointA">The point to calculate from</param>
            <param name="pointB">The point to calculate to</param>
            <returns>Voyage distance</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.GetSubmarineSurveyDuration(System.Byte,System.Int16)">
            <summary>
            Gets the submarine survey duration
            </summary>
            <param name="point">The point to calculate</param>
            <param name="speed">Speed of the submarine to use</param>
            <returns>Survey Duration</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.IsSubmarineExplorationUnlocked(System.Byte)">
            <summary>
            Gets if the point is unlocked
            </summary>
            <param name="point">The point to check is unlocked or not</param>
            <returns>True or False</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingManager.IsSubmarineExplorationExplored(System.Byte)">
            <summary>
            Gets if the point is unlocked
            </summary>
            <param name="point">The point to check is explored or not</param>
            <returns>True or False</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopAirshipSubData.Log">
            <summary>
            Points to <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopAirshipData.AirshipLogList"/>
            Max 82 in the array
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopAirshipSubData.GetRegisterTime">
            <summary>Gets the registered time as a <see cref="T:System.DateTime"/> object</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopAirshipSubData.GetReturnTime">
            <summary>Gets the return time as a <see cref="T:System.DateTime"/> object</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopSubmersibleSubData.GetRegisterTime">
            <summary>Gets the registered time as a <see cref="T:System.DateTime"/> object</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.Housing.HousingWorkshopSubmersibleSubData.GetReturnTime">
            <summary>Gets the return time as a <see cref="T:System.DateTime"/> object</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.InstanceContent.InstanceContentDirector.TimeRemaining">
            <summary>
            The remaining time in seconds for the instance.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.InventoryManager.GetPermittedGearsetCount">
            <summary>
            Get the number of gearsets the player is permitted to have/use.
            </summary>
            <returns>Returns the number of gearsets the player can use.</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.CurrentRank">
            <summary>
            The current Sanctuary Rank of the player's island. Controls what buildings/items/recipes are or aren't
            available to the player, and represented by MJIRank.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.CurrentXP">
            <summary>
            The XP earned towards the next Island Sanctuary rank. Resets to 0 upon leveling up the Sanctuary. 
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.CurrentProgress">
            <summary>
            The current progress of the player, as represented by MJIProgress. Appears to be bound to the island
            sanctuary "tutorial" more than anything.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.VillageDevelopmentLevel">
            <summary>
            The current development level of the player's village on their island. Controls what building zones are
            available.
            </summary>
            <remarks>
            Allowed building locations are part of the MJIBuildingPlace (+0x10) and MJILandmarkPlace (+0x10) Lumina
            sheets.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.PathsGlamourId">
            <summary>
            The glamour ID applied to paths around the Island Sanctuary.
            Correlates to a subrow in MJIVillageAppearanceUI, row 0.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.GroundsGlamourId">
            <summary>
            The glamour ID applied to grounds around the Island Sanctuary.
            Correlates to a subrow in MJIVillageAppearanceUI, row 2.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.SlopesGlamourId">
            <summary>
            The glamour ID applied to slopes around the Island Sanctuary.
            Correlates to a subrow in MJIVillageAppeareanceUI, row 1.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.UnlockedKeyItems">
            <summary>
            A bitfield representing all unlocked key items (MJIKeyItem) for the player. Backing field for
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsKeyItemUnlocked(System.UInt16)"/>, which should be used where possible.
            </summary>
            <remarks>
            The index of this field will be (RowID - 1), so "Islekeep's Stone Hatchet" appears at position 0.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.UnlockedRecipes">
            <summary>
            A bitfield representing if a specific recipe (MJIRecipe) is unlocked. Backing field for
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsRecipeUnlocked(System.UInt16)"/>, which should be used where possible.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LockedPouchItems">
            <summary>
            An array of booleans representing if a specific item is (un)locked. Locked/unavailable items are set to true,
            while those that are unlocked are false. This array is indexed by RowID from the MJIItemPouch table.
            An item appears to be unlocked upon being gathered or crafted for the first time.
            <seealso cref="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsPouchItemLocked(System.UInt16)" />
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Farm">
            <summary>
            A sub-struct representing the Farm's (Cropland's) current state
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Pasture">
            <summary>
            A sub-struct representing the Pasture's current state.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.PastureUnderCare">
            <summary>
            Appears to be set if the pasture in it has any animal currently under care.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.PastureDailyCareFee">
            <summary>
            The current daily care fee paid to the Creature Comforter for the pasture.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.FarmDailyCareFee">
            <summary>
            The current daily care fee paid to the Produce Producer for the farm.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LandmarkHoursToCompletion">
            <summary>
            The current number of hours remaining until a specific Landmark has finished construction.
            
            This value may be zero when there is either no construction or if construction is finished and the landmark
            needs to be "finalized" by the player.
            
            This array is indexed by the RowID of an MJILandmarkPlace.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LandmarkIds">
            <summary>
            The RowID of the MJILandmark present at a specific MJILandmarkPlace.
            
            This array is indexed by the RowID of an MJILandmarkPlace.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LandmarkUnderConstruction">
            <summary>
            The current construction status of a landmark at a specific MJILandmarkPlace.
            
            This array is indexed by the RowID of an MJILandmarkPlace.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Workshops">
             <summary>
             A struct representing the current state of workshops present on the island. See the struct documentation
             for more information on how to access this data.
            
             Note that this struct only provides mapping from a workshop ID to other data.
             </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Granaries">
            <summary>
            A struct representing the current state of granaries present on the island. See the struct documentation
            for more information on how to access this data.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.CabinLevel">
            <summary>
            The current level of the Cozy Cabin for the Island Sanctuary.
            </summary>
            <remarks>
            This field is offset by 1 compared to the level present in MJIBuildings. Cabin Level 3 will actually have
            a value of 3 in this field. This is *probably* because Cabin Level 0 is "nonexistent"..?
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.CabinGlamour">
            <summary>
            The current glamour cast on the Cozy Cabin (if any). Relates to the appropriate sub-row in MJIBuilding.
            </summary>
            <remarks>
            This field is *not* offset by one like CabinLevel; Cabin Level 3 will report here as 2.
            </remarks>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops">
            <summary>
            A struct representing a list of workshops present in the Island Sanctuary.
            
            The struct provides a helper method to retrieve information about a single workshop (referenced by ID), but will
            otherwise allow querying a specific field by ID directly.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.PlaceId">
            <summary>
            The MJIBuildingPlace in which this particular building resides.
            
            If this building is not built, this value will be zero.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.GlamourLevel">
            <summary>
            The glamour level of a particular building. This value refers to a specific sub-row of MJIBuilding.
            </summary>
            <remarks>
            This level is one less than the building's level; Workshop III will report as 2.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.HoursToCompletion">
            <summary>
            Hours remaining in the construction/upgrade of a building.
            
            If the building is done or is not under construction, this value will be zero.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.BuildingLevel">
            <summary>
            The true level of a particular building. Like GlamourLevel, also refers to a specific sub-row of MJIBuilding.
            </summary>
            <remarks>
            This level is one less than the building's level; Workshop III will report as 2.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.UnderConstruction">
            <summary>
            Report if a specific building is currently under construction.
            
            May report 1 while HoursToCompletion is 0 if the building needs to be "finalized" through user interaction.
            </summary>
            <remarks>
            So far the only observed value for this field is 0 or 1, but more values may exist (?).
            </remarks>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.Item(System.Int32)">
            <summary>
            Helper method to return all known information about a specific building at once.
            </summary>
            <param name="idx">The index of the building to retrieve</param>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries">
            <summary>
            A struct representing a list of granaries present in the Island Sanctuary.
            
            The struct provides a helper method to retrieve information about a single granary (referenced by ID), but will
            otherwise allow querying a specific field by ID directly.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries.PlaceId">
            <inheritdoc cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.PlaceId"/>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries.GlamourLevel">
            <inheritdoc cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.GlamourLevel"/>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries.HoursToCompletion">
            <inheritdoc cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.HoursToCompletion"/>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries.BuildingLevel">
            <inheritdoc cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.BuildingLevel"/>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIGranaries.UnderConstruction">
            <inheritdoc cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIWorkshops.UnderConstruction"/>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager">
            <summary>
            Manager struct (?) for Island Sanctuary (internally MJI).
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsPlayerInSanctuary">
            <summary>
            Reports if the player is currently on the Island Sanctuary.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.AllowedVisitors">
            <summary>
            Represents the currently allowed visitors to the Island Sanctuary.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentMode">
            <summary>
            The current mode (as listed in MJIHudMode) that the player is in.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentModeItem">
            <summary>
            The currently-selected item for the player's gathering mode. Will only have a value if the gathering mode
            in question supports item usage.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.LandmarkPlacements">
            <summary>
            A struct representing landmark placements on the Island Sanctuary. Each index represents a specific landmark
            slot directly. Refer to <see cref="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJILandmarkPlacement"/> for more information.
            </summary>
            <remarks>
            This field's exact purpose is currently unknown, but seems to be related to either mapping or rendering
            logic. To that end, this field doesn't actually seem authoritative for determining what's going on - see
            <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LandmarkIds"/> et al for what seems to be used by system logic.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.BuildingPlacements">
            <summary>
            A struct representing building placements on the Island Sanctuary. Each index represents a specific building
            slot directly. Refer to <see cref="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIBuildingPlacement"/> for more information.
            </summary>
            <remarks>
            This field's exact purpose is currently unknown, but seems to be related to either mapping or rendering
            logic. To that end, this field doesn't actually seem authoritative for determining what's going on - see
            <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Granaries"/> and <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.Workshops"/> for what seems to be
            used by system logic.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CabinPlacement">
            <summary>
            A struct representing information about the cabin.
            </summary>
            <remarks>
            Like <c>MJIBuildingPlacements</c>, the purpose of this field is unknown but it at least appears to behave
            like any other building placement.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.FarmPlacements">
            <summary>
            A struct representing farm (garden/cropland) placements on the current Island Sanctuary.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.PasturePlacements">
            <summary>
            A struct representing pasture placements on the current Island Sanctuary. Identical in behavior (hopefully)
            to that of <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.FarmPlacements"/>
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentPopularity">
            <summary>
            A reference to the current set of popularity scores given to craftworks on the player's island. The actual
            popularity scores can be pulled from the MJICraftworksPopularity sheet using this value as a Row ID.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.NextPopularity">
            <summary>
            A reference to the next cycle's popularity scores (called "predicted demand" in-game). Follows the same rules
            as <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentPopularity" />.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.SupplyAndDemandShifts">
            <summary>
            An array of bytes representing the current supply and demand shift for each craftwork that the player can
            create. Information for a specific item can be retrieved by querying the RowID for the item under inspection.
            <br /><br />
            The current supply value is stored in the upper half of each byte, while the current demand shift is stored in
            the lower half.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentCycleDay">
            <summary>
            The current day in the Craftworks cycle, from 0 to 6.
            </summary>
            <remarks>
            0 represents reset day (Tuesday).
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CraftworksRestDays">
            <summary>
            An array containing the currently-configured rest days for the Isleworks. Contains values 0 - 13, and is
            always in order.
            </summary>
            <remarks>
            Like CurrentCycleDay, 0 represents Reset Day. 7, likewise, represents the next reset. This field may not be
            populated until the Craftworks have been opened at least once.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.CurrentGroove">
            <summary>
            The current groove level of the Isleworks.
            </summary>
            <remarks>
            May not be present until the Isleworks is loaded at least once by the player.
            </remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.Instance">
            <summary>
            Retrieve an instance of IslandSanctuaryManager for consumption.
            </summary>
            <returns>Returns a pointer to the game's IslandSanctuaryManager instance.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsRecipeUnlocked(System.UInt16)">
            <summary>
            Check if a specific MJIRecipe is *unlocked*. Does not care if the item has been crafted.
            </summary>
            <param name="recipeId">The recipe ID to check for.</param>
            <returns>Returns true if the recipe can be crafted, false otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsPouchItemLocked(System.UInt16)">
            <summary>
            Check if a specific item in the Island Pouch is (un)locked.
            See <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LockedPouchItems" /> for more information. This method simply looks a value
            up from that array.
            </summary>
            <param name="itemId">The MJIItemPouch row ID to look up.</param>
            <returns>Returns true if the item is locked and/or hidden to the player.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsItemLocked(System.UInt32)">
            <summary>
            Check if an item (by EXD item ID) is locked in Island Sanctuary. This method performs *no validation* that
            the Item passed to it is actually an Island Sanctuary item.
            </summary>
            <remarks>
            This method performs an EXD lookup. If the Item is already known, it is better to query
            <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.IslandState.LockedPouchItems" />  by the AdditionalData field of the Item to avoid the
            unnecessary call.
            </remarks>
            <seealso cref="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsPouchItemLocked(System.UInt16)" />
            <param name="itemId">The Item ID (from EXD) to look up.</param>
            <returns>Returns <c>true</c> if the item is locked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsFunctionUnlocked(System.Byte)">
            <summary>
            Checks if a specific MJIFunction is unlocked and able to be used
            </summary>
            <param name="functionId">The RowID of the MJIFunction to check</param>
            <returns>Returns <c>true</c> if the function is unlocked, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.GetVisibleMinimapIcons">
            <summary>
            Get a bitfield representing the currently-displayed minimap icons.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.GetPastureSlotCount">
            <summary>
            Gets the total number of slots available in the Island Sanctuary pasture.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.GetFarmSlotCount">
            <summary>
            Gets the total number of slots available Island Sanctuary farm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.IsKeyItemUnlocked(System.UInt16)">
            <summary>
            Check if a specific MJIKeyItem is unlocked by the player.
            </summary>
            <remarks>
            This is manually implemented as the only place this key item check actually seems to exist in the code is
            (frustratingly) not within MJIManager. See <code>E8 ?? ?? ?? ?? 84 C0 74 61 48 85 DB</code> for the
            reference(-ish) implementation used here.
            </remarks>
            <param name="keyItemId">The RowID of the MJIKeyItem to check.</param>
            <returns>Returns true if the key item is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.GetSupplyForCraftwork(System.UInt32)">
            <summary>
            Return the Supply value for a specified craftwork.
            </summary>
            <param name="itemId">The Craftwork ID to look up</param>
            <returns>Returns an enum value.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIManager.GetDemandShiftForCraftwork(System.UInt32)">
            <summary>
            Return the Demand Shift value for a specified craftwork.
            </summary>
            <param name="itemId">The Craftwork ID to look up</param>
            <returns>Returns an enum value.</returns>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIBuildingPlacement">
            <summary>
            A record of building population information at a specific Site ID. 
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIBuildingPlacement.PlaceId">
            <summary>
            At load, the location of this specific building. Will update if a building is changed, but the exact
            mechanism of the update (and why it does such) is not currently known.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIBuildingPlacement.SgbId">
             <summary>
             The current SGB ID of this particular building.
            
             When a building is fully constructed, this will be the value present at offset +0x0C from MJIBuilding. While
             a building is under construction, however, the appropriate model (as determined by progress) will be shown
             from columns +0E, +10, +12, or +14.
            
             Can also be zero, if nothing is built in that location yet.
             </summary>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJILandmarkPlacement">
            <summary>
            A record of landmark population information at a specific Site ID. 
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJILandmarkPlacement.LandmarkId">
            <summary>
            The RowID of the landmark currently present at the specified location.
            </summary>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIFarmPasturePlacement">
            <summary>
            A record of landmark population information at a specific Site ID. 
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIFarmPasturePlacement.SgbId">
            <summary>
            The SGB ID of the model to use for this location
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIPastureHandler.MJIAnimals">
            <summary>
            An array representing all animals currently present in the pastures on the Island. 
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIPastureHandler.RoamingMinions">
            <summary>
            An array representing which minions are currently out roaming the Island. This array is indexed by row ID from
            the Companion EXD sheet. See <see cref="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIPastureHandler.MinionSlots"/> if information about minion locations is required.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIPastureHandler.MinionSlots">
            <summary>
            An array containing information on all the minion slots present on the Island Sanctuary.
            This array is indexed by an internal ID and does not appear to be grouped by location or similar.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIPastureHandler.GetCurrentRoamingMinionCount">
            <summary>
            Gets the current number of minions roaming the Island Sanctuary.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIMinionSlot.SlotId">
            <summary>
            An internal ID used to track minion slots.
            </summary>
            <remarks>
            May be set to 40 if the slot is currently empty or uninitialized.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIMinionSlot.PopAreaId">
            <summary>
            The MJIMinionPopAreaId that this minion currently resides in.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.MJI.MJIMinionSlot.IsSlotPopulated">
            <summary>
            Check if this specific Minion Slot contains a minion or not.
            </summary>
            <returns>Returns <c>true</c> if a minion is present, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetQuestSequence(System.UInt16)">
            Get the current step in a specific quest. Will return 0 if the quest is not active (even if the quest has been
            completed prior).
            <param name="questId">The quest ID to check.</param>
            <returns>Returns a byte representing the current progression of the specified quest.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetQuestSequence(System.UInt32)">
            <inheritdoc cref="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetQuestSequence(System.UInt16)"/>
            <remarks>This is a helper method to handle trimming uints down to the game-requested ushort.</remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.IsQuestAccepted(System.UInt16)">
            Checks if a specified quest has been accepted (and is active). This method does not check if the quest has been
            completed or not.
            <param name="questId">The quest ID to check.</param>
            <returns>Returns <c>true</c> if the quest has been accepted, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.IsQuestAccepted(System.UInt32)">
            <inheritdoc cref="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.IsQuestAccepted(System.UInt16)"/>
            <remarks>This is a helper method to handle trimming uints down to the game-requested ushort.</remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.IsLevequestComplete(System.UInt16)">
            <summary>
            Check if a specific levequest has been completed.
            </summary>
            <param name="levequestId">The RowId of the Leve Sheet.</param>
            <returns>Returns <c>true</c> if the levequest has been completed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetNextLeveAllowancesTimestamp">
            <summary>
            Get the time when the player will receive new leve allowances.
            </summary>
            <remarks>
            Has to be multiplied by 60 for a unix timestamp.<br/>
            Use <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetNextLeveAllowancesUnixTimestamp"/> or <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetNextLeveAllowancesDateTime"/> instead.
            </remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetNextLeveAllowancesUnixTimestamp">
            <summary>
            Get the time when the player will receive new leve allowances.
            </summary>
            <returns>A unix timestamp as <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetNextLeveAllowancesDateTime">
            <summary>
            Get the time when the player will receive new leve allowances.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> in the local time zone.</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.RetainerManager.LastSelectedRetainerId">
            <summary>
            Contains the Retainer.RetainerId of the last retainer to be selected.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.RetainerManager.GetRetainerCount">
            <summary>
            Counts the number of Retainers that have an assigned ID.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.RetainerManager.GetActiveRetainer">
            <summary>
            Will return the Retainer referenced by LastSelectedRetainerId.
            </summary>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.UI.Cabinet">
            <summary>
            A struct representing the UIState Cabinet (otherwise known as the "Armoire" in-game) and the bitfield for stores
            items.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.Cabinet.IsItemInCabinet(System.Int32)">
            <summary>
            Check if an item is stored in the player's armoire.
            </summary>
            <param name="cabinetItemId">The armoire item entry ID to check against. This is not an item ID but a specific ID
            from the Cabinet table.</param>
            <returns>Returns true if the armoire contains the specified item.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.Cabinet.IsCabinetLoaded">
            <summary>
            Check if the armoire is reporting as "loaded" from the server.
            </summary>
            <remarks>
            The armoire will only load when requested (so, when a player goes to an inn room and chooses to add/remove an
            item or performs certain glamour operations). As such, before any check can take place, a developer must first
            validate that the armoire is loaded. Generally, this will be when CabinetLoaded == 1, but for some reason this
            can have a value of 2 as well.
            </remarks>
            <returns>Returns true if the armoire has been retrieved.</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.Inspect.ExtraInspectData">
            <remarks>
            1 = Eureka: Elemental Level<br/>
            2 = Eureka: Is Elemental Level Synced<br/>
            3 = Eureka: Time Remaining<br/>
            4 = Bozja: Resistance Rank<br/>
            5 = Bozja: Time Remaining
            </remarks>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.UI.MobHunt">
            <summary>
            Note: The game does not clear the data when a mark is completed.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.MobHunt.GetKillCount(System.Byte,System.Byte)">
            <param name="markIndex">Mark Bill Index 0-18</param>
            <param name="mobIndex">Mob Index 0-4</param>
            <returns>Current kill count</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.MobHunt.GetObtainedHuntOrderRowId(System.Byte)">
            <param name="markIndex">Mark Bill Index 0-18</param>
            <returns>MobHuntOrder Primary Row Id</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.MobHunt.GetMarkIndexFromItemId(System.Int32)">
            <param name="itemId">Mark Bill ItemId</param>
            <returns>18 Indicates Not Found</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.PenaltyTimestamps">
            <remarks>
            0 = Duty penalty<br/>
            1 = Unknown<br/>
            See also: <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.RouletteController.GetPenaltyRemainingInMinutes(System.Byte)" />
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.ContentRouletteCompletion">
            <remarks>
            Index is column 27 of ContentRoulette sheet.<br/>
            See also: <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.RouletteController.IsRouletteComplete(System.Byte)" />
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.SelectedPoses">
            <remarks>
            0 = Idle Pose<br/>
            1 = Unknown<br/>
            2 = Sit Pose<br/>
            3 = Ground Sit Pose<br/>
            4 = Bed Pose<br/>
            5 = Accessorie Pose: Umbrellas<br/>
            6 = Accessorie Pose: Glasses, Wings
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.DeliveryLevel">
            <summary>Carrier Level of Delivery Moogle Quests</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.MeisterFlag">
            <summary>
            Flag containing information about which DoH job the player is specialized in.
            </summary>
            <remarks>
            Use these instead:<br/>
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlag(System.UInt32)" /><br/>
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlagMaxCount" /><br/>
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlagAndHasSoulStoneEquipped(System.UInt32)" />
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoOrderData">
            <summary>RowIds of WeeklyBingoOrderData sheet</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoRewardData">
            <summary>RowIds of WeeklyBingoRewardData sheet</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState._weeklyBingoStickers">
            <summary>Bitflags of placed stickers.</summary>
            <remarks>Use IsWeeklyBingoStickerPlaced(index) and WeeklyBingoNumPlacedStickers instead.</remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState._weeklyBingoFlags">
            <remarks>Use GetWeeklyBingoExpireUnixTimestamp(), WeeklyBingoNumSecondChancePoints and HasWeeklyBingoJournal instead</remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlagMaxCount">
            <summary>
            Returns whether the player is possessing the maximum amount of specialized souls.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlag(System.UInt32)">
            <summary>
            Returns whether the player is specialized in the given DoH ClassJob.
            </summary>
            <param name="classJobId">The ClassJob row id of the DoH job to check.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMeisterFlagAndHasSoulStoneEquipped(System.UInt32)">
            <summary>
            Returns whether the player is specialized in the given DoH ClassJob and has the specialization stone equipped.
            </summary>
            <param name="classJobId">The ClassJob row id of the DoH job to check.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMountUnlocked(System.UInt32)">
            <summary>
            Check if a specific mount has been unlocked by the player.
            </summary>
            <param name="mountId">The ID of the mount to look up.</param>
            <returns>Returns true if the mount has been unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsOrnamentUnlocked(System.UInt32)">
            <summary>
            Check if a specific ornament (fashion accessory) has been unlocked by the player.
            </summary>
            <param name="ornamentId">The ID of the ornament to look up.</param>
            <returns>Returns true if the ornament has been unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsOrchestrionRollUnlocked(System.UInt32)">
            <summary>
            Check if a specific orchestrion roll has been unlocked by the player.
            </summary>
            <param name="rollId">The ID of the roll to look up.</param>
            <returns>Returns true if the roll has been unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsSecretRecipeBookUnlocked(System.UInt32)">
            <summary>
            Check if a Secret Recipe Book (DoH Master Tome) is unlocked and (indirectly) if the player can craft recipes
            from that specific book.
            </summary>
            <param name="tomeId">The ID of the book to check for. Can be retrieved from the SecretRecipeBook sheet.</param>
            <returns>Returns true if the book is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsFolkloreBookUnlocked(System.UInt32)">
            <summary>
            Check if a Folklore Book (DoL Master Tome) is unlocked and (indirectly) if the player can find legendary nodes
            revealed by that book.
            </summary>
            <param name="tomeId">The ID of the book to check for. Can be retrieved from GatheringSubCategory.Division</param>
            <returns>Returns true if the book is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMcGuffinUnlocked(System.UInt32)">
            <summary>
            Check if a specific McGuffin (Collectible/Curiosity) has been unlocked by the player.
            </summary>
            <param name="mcGuffinId">The ID of the McGuffin to look up, generally from the McGuffin sheet.</param>
            <returns>Returns true if the McGuffin has been unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsFramersKitUnlocked(System.UInt32)">
            <summary>
            Check if a particular Framer's Kit is unlocked and can be used.
            </summary>
            <remarks>
            How IDs are located is a bit weird and not necessarily fully understood at time of writing. They appear on Framer
            Kit items in the AdditionalData field, and at +0 in BannerCondition EXDs when +0xE == 9.
            </remarks>
            <param name="kitId">The kit ID to check for.</param>
            <returns>Returns true if the framer's kit is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsAetherCurrentZoneComplete(System.UInt32)">
            <summary>
            Returns whether all aether currents of a zone were discovered.
            </summary>
            <param name="territoryTypeColumn32">Column 32 of TerritoryType</param>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoTaskStatus.Open">
            <summary>Incomplete task.</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoTaskStatus.Claimable">
            <summary>Completed task, but sticker not placed.</summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoTaskStatus.Claimed">
            <summary>Completed task and sticker placed.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState._getWeeklyBingoFlagsValue(System.UInt32)">
            <summary>Returns the value of the requested flag.</summary>
            <param name="mode">
            The following modes have been found:<br/>
            3 = second chance points<br/>
            5 = whether player is in possession of the journal
            </param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsWeeklyBingoExpired">
            <summary>Returns whether the Wondrous Tails Journal has expired or not.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.GetWeeklyBingoExpireUnixTimestamp">
            <summary>Returns the expiration of the players Wondrous Tails Journal as a unix timestamp.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsWeeklyBingoStickerPlaced(System.Int32)">
            <summary>Returns whether the task is complete or not.</summary>
            <param name="index">Task index, starting at 1.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.GetWeeklyBingoTaskStatus(System.Int32)">
            <summary>Returns the stored state of the indexed task.</summary>
            <param name="index">Task index, starting at 0.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.GetWeeklyBingoExpMultiplier">
            <summary>Returns the experience multiplier.</summary>
            <remarks>The experience reward is being calculated as: Current Job Experience / 100 * WeeklyBingoExpMultiplier</remarks>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoExpireDateTime">
            <summary>Returns the expiration of the players Wondrous Tails Journal as UTC DateTime.</summary>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoNumSecondChancePoints">
            <summary>Returns the current number of second chance points.</summary>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.HasWeeklyBingoJournal">
            <summary>Returns whether the player is in possession of the journal or not.</summary>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.WeeklyBingoNumPlacedStickers">
            <summary>Returns the number of placed stickers.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsMentor">
            <summary>
            Returns whether the player is any kind of Mentor (Battle or Trade Mentor).
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsBattleMentor">
            <summary>
            Returns whether the player is a Battle Mentor.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsTradeMentor">
            <summary>
            Returns whether the player is a Trade Mentor.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsNovice">
            <summary>
            Returns whether the player is a novice (aka. Sprout or New Adventurer).<br/>
            Can be false if /nastatus was used to deactivate it.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsReturner">
            <summary>
            Returns whether the player is a returner.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerState.IsPlayerStateFlagSet(FFXIVClientStructs.FFXIV.Client.Game.UI.PlayerStateFlag)">
            <summary>
            Returns whether the specified PlayerStateFlag is set.
            </summary>
            <param name="flag">The PlayerStateFlag to check.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPvPRank">
            <summary>Gets the current PvP rank for the active Grand Company.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPvPTotalExperience">
            <summary>Gets the total accumulated PvP experience for the active Grand Company.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPvPCurrentRankExperience">
            <summary>Gets the experience for the current PvP rank for the active Grand Company.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPvPCurrentRankNeededExperience">
            <summary>Gets the needed experience for the current PvP rank for the active Grand Company.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetSeriesCurrentRank">
            <summary>Gets the current PvP Series rank.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetSeriesClaimedRank">
            <summary>Gets the claimed PvP Series rank.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetSeriesExperience">
            <summary>Gets the current PvP Series rank experience.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.HasPreviousSeriesRank">
            <summary>Returns whether the player had a rank last PvP Series.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPreviousSeriesRank">
            <summary>Gets the previous PvP Series achieved rank.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.PvPProfile.GetPreviousSeriesClaimedRank">
            <summary>Gets the previous PvP Series claimed rank.</summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.RouletteController.GetPenaltyRemainingInMinutes(System.Byte)">
            <summary>
            Provides the number of minutes remaining on the penalty.
            </summary>
            <param name="index">0 = Duty penalty<br/>1 = Unknown</param>
            <returns>Number of minutes left</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.Telepo.GetTeleportCost(System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Boolean)">
            Territories have aetherstream coordinates X and Y, an associated ExpansionValue and an associated Plane in TerritoryTypeTelepo.
            Planes have relays described in the TelepoRelay sheet, every pair of planes has an associated entry territory, exit territory and cost organized in a 6x6 matrix.
            If planes are the same, the cost function is
                f(Entry, Exit) := `100 + AetherStreamDistance * Max(1000, EntryExpansionValue + ExitExpansionValue + 600) / 5000`.
            If planes differ, the cost computes as
                f(Entry, Exit) := f(Entry, EntryRelay(EntryPlane, ExitPlane)) + Cost(EntryPlane, ExitPlane) + f(ExitRelay(EntryPlane, ExitPlane), Exit).
            Then, the growth is halved after 1000, i.e. if f(Entry, Exit) > 1000, then return (f(Entry, Exit) - 1000) / 2 + 1000 instead.
            Additionally, if <paramref name="residentArea"/> is true, the cost is quartered, and if otherwise either <paramref name="unk"/> or <paramref name="favored"/> is true, the cost is halved.
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.Game.UI.TerritoryInfo">
            <summary>
            Contains the PlaceName values of where the player is currently located.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsUnlockLinkUnlockedOrQuestCompleted(System.UInt32,System.Byte,System.Boolean)">
            <summary>
            Checks to see if an unlock link is unlocked, or if the passed value is greater than 0x10000, checks if the quest
            is completed.
            </summary>
            <param name="unlockLinkOrQuestId">The unlock link or quest ID to check.</param>
            <param name="minQuestProgression">If the quest is not complete, check for <em>at least</em> this level of
            progress in the quest (using <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.QuestManager.GetQuestSequence(System.UInt16)"/>. If this parameter is <c>0</c>,
            the quest must have been completed.</param>
            <param name="a4">Exact purpose unknown, but appears to be a flag to respect Unlock Flag 245 (ignore quest
            progression?) for quest-based checks. Virtually always <c>true</c> in game code.</param>
            <returns>Returns true if the unlock link is unlocked or if the quest is completed.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsItemActionUnlocked(System.Void*)">
            <summary>
            Check an item (by EXD row) to see if the action associated with the item is unlocked or "obtained/registered."
            </summary>
            <remarks>
            This method <b>will</b> call EXD, so the usual caveats there apply. Where possible, use a by-ID check as
            they're generally faster and/or rely less on EXD.
            </remarks>
            <param name="itemExdPtr">A pointer to an EXD row for an item, generally retrieved from <see cref="M:FFXIVClientStructs.FFXIV.Component.Exd.ExdModule.GetItemRowById(System.UInt32)"/>.</param>
            <returns>Returns a value denoting this item's unlock status from the below table:
            <list type="table">
            <listheader><term>Value</term><description>Meaning</description></listheader>
            <item><term>1</term><description>The item is unlocked/registered.</description></item>
            <item><term>2</term><description>The item is not unlocked/registered, but can be.</description></item>
            <item><term>3</term><description>Unknown, possibly "information not loaded yet."</description></item>
            <item><term>4</term><description>The item does not have an unlock status.</description></item>
            </list>
            </returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsTripleTriadCardUnlocked(System.UInt16)">
            <summary>
            Check if a Triple Triad card is obtained by the character.
            </summary>
            <param name="cardId">The ID of the card (technically, of TripleTriadCardResident) to check against.</param>
            <returns>Returns true if the card is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsEmoteUnlocked(System.UInt16)">
            <summary>
            Check if an emote (by ID) is unlocked.
            </summary>
            <remarks>
            This method *will* perform an EXD get. If the unlock link is known it is better to call
            <see cref="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsUnlockLinkUnlockedOrQuestCompleted(System.UInt32,System.Byte,System.Boolean)"/> in order to prevent the extra call, as it performs
            functionally the same checks.
            </remarks>
            <param name="emoteId">The ID of the emote to check for.</param>
            <returns>Returns true if the emote is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsAetheryteUnlocked(System.UInt32)">
            <summary>
            Check if a aetheryte is unlocked for the current character.
            </summary>
            <param name="aetheryteId">The ID of the aetheryte to check for.</param>
            <returns>Returns true if the specified aetheryte is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsHowToUnlocked(System.UInt32)">
            <summary>
            Check if a HowTo is unlocked for the current character.
            </summary>
            <param name="howtoId">The ID of the HowTo to check for.</param>
            <returns>Returns true if the specified HowTo is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.Game.UI.UIState.IsCompanionUnlocked(System.UInt32)">
            <summary>
            Check if a companion (minion) is unlocked for the current character.
            </summary>
            <remarks>
            WARNING: This method is NOT BOUNDED on IDs. While *one* function seems to set an upper bound on this, this
            method is a pain in the neck to find *and*, frustratingly, cannot be sigged. 
            </remarks>
            <param name="companionId">The ID of the companion/minion to check for.</param>
            <returns>Returns true if the specified minion is unlocked.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.System.Scheduler.Resource.SchedulerResource.GetResourceData(System.UInt32*)">
            <summary>
            Returns the data from the contained resource handle or null.
            </summary>
            <param name="dataLength">The length of the returned data.</param>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionBarBase.CurrentPulsingSlots">
            <summary>
            Bitfield representing currently active pulses.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionBarBase.RaptureHotbarId">
            <summary>
            The ID of the hotbar in RaptureHotbarModule that this ActionBar is currently referencing.
            </summary>
            <remarks>
            This field is ignored for WHXBs.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionBarBase.IsSharedHotbar">
            <summary>
            Whether the current hotbar is considered a "shared" hotbar or not.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.AddonActionBarBase.PulseActionBarSlot(System.Int32)">
             <summary>
             Trigger the "pulse" effect for the specified hotbar slot, similar to what happens on hotbar slot keypress.
            
             Note that this method *CAN* trigger pulses on hotbar slots that don't have an item in them!
             </summary>
             <param name="slotIndex">A zero-indexed value of which slot to pulse.</param>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionDoubleCrossBase.ShowDPadSlots">
            <summary>
            Set to 1 when the WXHB is showing the directional pad inputs as well as the action button inputs.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionDoubleCrossBase.BarTarget">
            <summary>
            The ID of the hotbar in <see cref="T:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureHotbarModule"/> that this action bar is currently referencing.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionDoubleCrossBase.UseLeftSide">
            <summary>
            Use the left side (slots 0-7) of the hotbar specified in <see cref="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionDoubleCrossBase.BarTarget"/>.
            </summary>
            <remarks>
            In effect, when this is false, it means any given HotBarSlot will be at index +8 from the index in the UI.
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonActionDoubleCrossBase.MergedPositioning">
            <summary>
            Set to 1 when the WXHB is in "merged positioning" mode with the normal cross hotbar.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonMacro.DefaultIcon">
            <summary>
            Used when creating a new macro from a blank state.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonMacro.MacroSetIcon">
            <summary>
            Array of default icons, used when no macro icon command is used.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.AddonMacro.SelectedMacroIndex">
            <summary>
            Note: Value is only set when changing page.
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Agent.AgentMycItemBox.ItemBoxData">
            <remarks>
            Contains how many of each item the player has in both the cache and the holster
            </remarks>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Agent.AgentRetainerItemTransferData.DuplicateItemEntry.ItemId">
            <summary>
            Item ID for the duplicate item.
            Note: Not always set, unsure why...
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Agent.AgentRetainerItemTransferData.DuplicateItemEntry.UiCategoryIconId">
            <summary>.
            ItemUiCategory Icon ID
            Note: Not always set, unsure why...
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.OnlineStatus">
            <summary>
            Values in Hex
            0000 = Online
            0010 = Busy
            0040 = Playing Triple Triad
            0080 = Viewing Cutscene
            0200 = AFK
            0400 = Camera Mode
            4000 = RP
            8000 = LFP
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.MentorState">
            <summary>
            Values in Hex
            02 = Waiting for DutyFinder
            08 = Mentor
            10 = PvE Mentor
            20 = Trade Mentor
            40 = PvPMentor
            80 = Returner
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.PartyStatus">
            <summary>
            Values in Hex
            01 = New Adventurer
            10 = PartyLeader
            20 = PartyMember
            40 = Recruiting Memebers
            80 = Party Member (Cross World)
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.DutyStatus">
            <summary>
            08 = In duty
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.MainLanguage">
            <summary>
            Values in Dec
            0 = JP
            1 = EN
            2 = DE
            3 = FR
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterData.AvailableLanguages">
            <summary>
            Bitmask, Values in Dec
            1 = JP
            2 = EN
            4 = DE
            8 = FR
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.OnlineStatus">
            <summary>
            Values in Hex
            0000 = Online
            0010 = Busy
            0040 = Playing Triple Triad
            0080 = Viewing Cutscene
            0200 = AFK
            0400 = Camera Mode
            4000 = RP
            8000 = LFP
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.MentorState">
            <summary>
            Values in Hex
            02 = Waiting for DutyFinder
            08 = Mentor
            10 = PvE Mentor
            20 = Trade Mentor
            40 = PvPMentor
            80 = Returner
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.PartyStatus">
            <summary>
            Values in Hex
            01 = New Adventurer
            10 = PartyLeader
            20 = PartyMember
            40 = Recruiting Memebers
            80 = Party Member (Cross World)
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.DutyStatus">
            <summary>
            08 = In duty
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.MainLanguage">
            <summary>
            Values in Dec
            0 = JP
            1 = EN
            2 = DE
            3 = FR
            </summary>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyCommonList.CharacterArray.Entry.AvailableLanguages">
            <summary>
            Bitmask, Values in Dec
            1 = JP
            2 = EN
            4 = DE
            8 = FR
            </summary>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.UI.Info.InfoProxyFreeCompany.RankData.ChestAccess">
            <summary>
            Deposit Only is stored at a diferent location
            The definition of using bit 4 is virtual and done for ease of use
            </summary>
        </member>
        <member name="T:FFXIVClientStructs.FFXIV.Client.UI.Misc.ConfigOption">
            <summary>
            ConfigOption indexes for use with ConfigModule.
            This enum will be incorrect after any patch that adds or removes any config options.
            </summary>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.ItemFinderModule.SearchForItem(System.UInt32,System.Boolean)">
            <summary>
            Searches inventories for the specified item id and opens the Item Search List window to display the results.
            </summary>
            <param name="itemId">The Id of the item to search for.</param>
            <param name="includeHQAndCollectibles">If <c>true</c>, it also searches for the item id as HQ and collectible versions.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.GetGearset(System.Int32)">
            <summary>
            Return a pointer to a <see cref="T:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.GearsetEntry"/> by index/ID.
            </summary>
            <param name="gearsetId">The index of the gearset to look up.</param>
            <returns>Returns a pointer to a GearsetEntry</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.IsValidGearset(System.Int32)">
            <summary>
            Check if a gearset at a specific index is valid.
            </summary>
            <remarks>
            Will return 0 if the gearset index is higher than the player's max allowed gearset number.
            </remarks>
            <param name="gearsetId">The index of the gearset to look up.</param>
            <returns>Returns 1 if the gearset is valid, 0 otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.EquipGearset(System.Int32,System.Byte)">
            <summary>
            Attempt to equip a gearset, with certain safety checks in place.
            </summary>
            <param name="gearsetId">The gearset ID to attempt to equip.</param>
            <param name="glamourPlateId">The glamour plate to attempt to equip alongside this gearset. Passing 0 will use the
            linked gearset (if any).</param>
            <returns>Returns 0 if the equip succeeded, -1 otherwise (???).</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.CreateGearset">
            <summary>
            Save the player's current inventory to a new gearset at the next possible ID.
            </summary>
            <returns>Returns the ID of the created gearset, or 255 if the creation attempt fails.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.DeleteGearset(System.Int32)">
            <summary>
            Delete the gearset at the specified ID.
            </summary>
            <param name="gearsetId">The gearset ID to delete.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.UpdateGearset(System.Int32)">
            <summary>
            Update the gearset at the specified ID with the currently equipped items.
            </summary>
            <param name="gearsetId">The gearset ID to delete.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.LinkGlamourPlate(System.Int32,System.Byte)">
            <summary>
            Link a glamour plate to a specific gearset.
            </summary>
            <param name="gearsetId">The gearset ID to link a glamour plate to </param>
            <param name="glamourPlateId">The glamour plate ID to link. 0 resets the linked glamour plate.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureGearsetModule.HasLinkedGlamourPlate(System.Int32)">
            <summary>
            Check if a specific gearset has a linked glamour plate.
            </summary>
            <param name="gearsetId">The ID of the gearset to check.</param>
            <returns>Returns 0 if a gearset is invalid or does not have a linked plate, 1 otherwise.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureHotbarModule.GetSlotAppearance(FFXIVClientStructs.FFXIV.Client.UI.Misc.HotbarSlotType*,System.UInt32*,System.UInt16*,FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureHotbarModule*,FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot*)">
            <summary>
            Retrieve's a hotbar slot's designated appearance (the slot type and slot ID) that will be used for icon display
            purposes. This method will resolve adjusted action IDs as appropriate.
            </summary>
            <remarks>
            The result of this method call will generally be written to IconTypeB/IconB, which is then used to
            look up the exact icon ID to display on the hotbar. This method appears to be run every frame for every
            visible hotbar slot in the game.
            </remarks>
            <param name="actionType">A pointer to where the slot's appearance action type will be written to.</param>
            <param name="actionId">A pointer to where the slot's appearance action ID will be written to.</param>
            <param name="UNK_0xC4">A pointer to where the slot's +C4 offset will be written to.</param>
            <param name="hotbarModule">A reference to the RaptureHotbarModule of the game.</param>
            <param name="slot">A reference to the hotbar slot to calculate the appearance for.</param>
            <returns>Returns the same value present in the actionId param.</returns>
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.PopUpHelp">
             The string that appears when a hotbar slot is hovered over.
            
             Calculated by concatenating GetDisplayNameForSlot with PopUpKeybindHint (in most cases).
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.CostText">
             The "cost text" to display when 0xCB is in mode 2 or 4.
            
             This is generally filled with a flexible MP cost (e.g. "All" for certain BLM spells) or "x 123" for items.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.PopUpKeybindHint">
             A human-friendly display of the keybind used for this hotbar slot.
            
             This text will generally lead with a space and have wrapping brackets, e.g. " [Ctrl-3]".
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.KeybindHint">
             A less-friendly version of the keybind used for this hotbar slot.
            
             The actual use of this field is unknown, but it appears to be related to the hint in the top-left of the hotbar
             UI.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.CommandId">
            The ID of the action that will be executed when this slot is triggered. Action type is determined by the
            CommandType field.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IconA">
             UNKNOWN. Appears to be the original action ID associated with this hotbar slot before adjustment.
            
             Note that this is *not* a reference to an icon ID; it must be combined with IconTypeA.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IconB">
             Appears to be the action ID that will be used to generate this hotbar slot icon.
            
             This field exists to allow a hotbar slot to have the appearance of one action, but in reality trigger a
             different action. For example, PvP combos will use this to track the "active" action.
            
             Note that this is *not* a reference to an icon directly.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xC4">
             Unknown field with offset 0xC4 (196), possibly overloaded
            
             Appears to have relation to the following:
             - Lost Finds Items appear to set this value to 1
             - In PVP actions, the high byte controls combo icon and the low byte counts which action the combo is on
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.CommandType">
            The HotbarSlotType of the action that will be executed when this hotbar slot is triggered.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IconTypeA">
            UNKNOWN. Appears to be the original action type associated with this hotbar slot before adjustment/loading.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IconTypeB">
             Appears to be the HotbarSlotType used to determine the icon to display on this hotbar slot.
            
             See notes on IconB for more information as to how this field is used.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xCA">
             Appears to be the "primary cost" of this action, mapping down to 0, 1, 2, 4, 5, 6, 7.
            
             Controls the color of the displayed cost when 0xCB is 1 or 2:
             - 0: White
             - 1: Green (HP)
             - 2: Light Pink (MP)
             - 3: Orange
             - 4: Pink (DoH - CP)
             - 5: Yellow (DoL - GP)
             - 6: Blue (Job Gauge?)
             - 7: Bright Yellow (Rival Wings - CE)
             - All others: Grey
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xCB">
             Appears to control display of the primary cost of the action (0xCA). 
            
             - 1: Displays action cost from 0xD0 in bottom left (e.g. for Actions or Craft Actions)
             - 2: Mode 1, but display a custom string from CostText instead (generally "All" on Actions with PrimaryCost = 4)
             - 3: Displays the value of 0xD0 in the bottom right (e.g. for Gearsets/UNK_0x17)
             - 4: Mode 3, but display a custom string from CostText instead (generally "x {count}" for Items)
             - 0/255: No display, all other cases
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.Icon">
            The icon ID that is currently being displayed on this hotbar slot. 
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xD0">
             UNKNOWN. Appears to be the "cost" of an action.
            
             For items, this field holds the number of items of that type currently present in inventory.
            
             For actions that have some cost (MP, job bar, etc.), this appears to be the relevant value shown in the bottom
             left of the action.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xD4">
            UNKNOWN. Appears to be Recipe specific. References the resulting Item ID of the recipe on the hotbar slot.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xD8">
            UNKNOWN. Appears to be Recipe specific. References the CraftType for the recipe on the hotbar slot
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xDC">
             UNKNOWN. Appears to be Recipe specific to check if a recipe is valid.
            
             Set to 1 when the recipe results in a nonzero number of items (???).
            
             If 0, the tooltip for this slot will display message noting the recipe is deleted.
             If 1, the tooltip for this slot will display the name and crafting class for that recipe.
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xDD">
             UNKNOWN. Appears to be Recipe specific.
            
             Always set to 1, apparently? 
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.UNK_0xDE">
             UNKNOWN. Appears to control UI display mode (icon and displayed name) in some way
            
             Known values so far:
             - 2: Appears to be set for adjusted actions (e.g. upgraded spells/weaponskills)
             - 3: Appears to mark a PVP combo action
             - 4: Set on Squadron Order - Disengage, maybe others
             - 5: Set for Lost Finds Items (?)
             - 0/255: "generic"
        </member>
        <member name="F:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IsLoaded">
            <summary>
            A "boolean" representing if this specific hotbar slot has been fully loaded. False for empty slots and slots
            that have yet to be loaded in the UI.
            </summary>
            <remarks>
            This appears to initialize as 0 and is set to 1 when the hotbar slot appears on a visible hotbar. It will not
            reset if the slot is hidden (and subsequently outdated).
            </remarks>
        </member>
        <member name="P:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.IsEmpty">
            <summary>
            Check if this hotbar slot is considered "empty" or not.
            </summary>
            <remarks>
            Borrows game logic of checking for a non-zero command ID. Kept as a byte for API compatibility though this
            probably should be a bool instead.
            </remarks>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.LoadIconFromSlotB">
            <summary>
            Populates HotBarSlot.Icon with information from IconB/IconTypeB. 
            </summary>
            <returns>Returns true if no icon was loaded (??)</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.GetIconIdForSlot(FFXIVClientStructs.FFXIV.Client.UI.Misc.HotbarSlotType,System.UInt32)">
             <summary>
             Get an icon ID for a hotbar slot, with specified appearance slot type and action ID.
            
             This method appears to exist to allow certain action types (specifically macros it seems?) to have a different
             appearance than the actual CommandType/CommandId called by this hotbar slot.
             </summary>
             <param name="slotType">The appearance slot type to use. Virtually almost always IconTypeB.</param>
             <param name="actionId">The appearance action ID to use. Virtually almost always IconB.</param>
             <returns>Returns an int of the icon that should be used for this hotbar slot.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.HotBarSlot.GetDisplayNameForSlot(FFXIVClientStructs.FFXIV.Client.UI.Misc.HotbarSlotType,System.UInt32)">
             <summary>
             Get the final name for a hotbar slot, taking into account the specified appearance slot type and action ID.
            
             This method is virtually almost always called using the parameters from IconTypeB and IconB.
            
             When slot field 0xDE is set to 3, this method will instead override the passed in slotType and actionId with
             the values present in IconTypeA and IconA. 
             </summary>
             <param name="slotType">The appearance slot type to use. Virtually almost always IconTypeB.</param>
             <param name="actionId">The appearance action ID to use. Virtually almost always IconB.</param>
             <returns>Returns a string representation of the name to be displayed to the user for this hotbar slot.</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureMacroModule.SetSavePendingFlag(System.Boolean,System.UInt32)">
            <summary>
            Sets a flag to mark the macro file as needing a save. Fires on any macro update, generally prior to saving.
            </summary>
            <param name="needsSave">A boolean denoting if the specified set needs to be saved.</param>
            <param name="set">The macro page ID that needs saving.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Client.UI.Misc.RaptureTextModule.FormatTimeSpan(System.UInt32,System.Boolean)">
            <summary>
            Display a timespan as hours, minutes or seconds with only the largest non zero unit.
            </summary>
            <param name="seconds"></param>
            <param name="alternativeMinutesGlyph">Use U+E028 for minutes</param>
            <returns>string containing one of 23h, 59m, 59s</returns>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Component.GUI.NumberArrayData.SetValue(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Set a value at the specified index of the IntArray.</summary>
            <param name="index">The index in the array.</param>
            <param name="value">The integer value.</param>
            <param name="force">If <c>true</c> it bypasses the check if the value is different from what is stored (read before write).</param>
            <param name="silent">If <c>false</c> and the value was changed, HasModifiedData will be set to <c>true</c>.</param>
        </member>
        <member name="M:FFXIVClientStructs.FFXIV.Component.GUI.StringArrayData.SetValue(System.Int32,System.Byte*,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Set a value at the specified index of the StringArray.</summary>
            <param name="index">The index in the array.</param>
            <param name="value">
            A pointer to a null terminated string.<br/>
            <b>Note:</b> When passing a C# string (made possible by the generator overload), make sure managed is set to <c>true</c>.
            </param>
            <param name="readBeforeWrite">
            If <c>true</c>, it compares the stored pointer with the passed pointer (not the text it points to) before setting it (read before write).<br/>
            If <c>false</c>, the stored pointer will always be replaced with the passed pointer.<br/><br/>
            In any way, it only has an effect if managed is <c>false</c>.
            </param>
            <param name="managed">
            Recommended to be set to <c>true</c> when using a temporary pointer.<br/>
            The game will allocate memory in the UI space and copy the text. The passed pointer can then be freed right after the SetValue call.<br/>
            Internally, the pointer to the allocated memory is (also) stored in ManagedStringArray to allow SetValue to reuse or reallocate the space as needed.
            </param>
            <param name="silent">If <c>false</c> and the value was changed, HasModifiedData will be set to <c>true</c>.</param>
        </member>
    </members>
</doc>
